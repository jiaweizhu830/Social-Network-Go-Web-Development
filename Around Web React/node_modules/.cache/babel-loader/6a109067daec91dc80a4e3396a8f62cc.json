{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xiaoq\\\\Developer\\\\around-web\\\\src\\\\components\\\\Home.js\";\nimport React from 'react';\nimport { Tabs, Button, Spin } from 'antd';\nimport { Gallery } from './Gallery';\nimport { CreatePostButton } from \"./CreatePostButton\";\nimport { GEOLOCATION_OPTIONS, POSITION_KEY, TOKEN_KEY, AUTH_HEADER, API_ROOT } from \"../constants\";\nimport '../styles/Home.css';\nconst {\n  TabPane\n} = Tabs;\nexport class Home extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loadingGeolocation: false,\n      loadingPosts: false,\n      errorMessage: null,\n      posts: []\n    };\n\n    this.onGeolocationSuccess = position => {\n      this.setState({\n        loadingGeolocation: false,\n        errorMessage: null\n      });\n      console.log(position); //destructuring\n\n      const {\n        latitude,\n        longitude\n      } = position.coords; //{ latitude: latitude, longitude: longitude }\n\n      localStorage.setItem(POSITION_KEY, JSON.stringify({\n        latitude,\n        longitude\n      }));\n      this.loadNearbyPost();\n    };\n\n    this.onGeolocationFailure = () => {\n      this.setState({\n        loadingGeolocation: false,\n        errorMessage: 'Failed to load geolocation.'\n      });\n    };\n\n    this.loadNearbyPost = () => {\n      this.setState({\n        loadingPosts: true,\n        errorMessage: null\n      });\n      const position = JSON.parse(localStorage.getItem(POSITION_KEY));\n      const range = 20;\n      const token = localStorage.getItem(TOKEN_KEY);\n      fetch(`${API_ROOT}/search?lat=${position.latitude}&lon=${position.longitude}&range=${range}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `${AUTH_HEADER} ${token}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Fail to load posts');\n      }).then(data => {\n        console.log(data);\n        this.setState({\n          loadingPosts: false,\n          posts: data ? data : []\n        });\n      }).catch(error => {\n        this.setState({\n          loadingPosts: false,\n          errorMessage: error.message\n        });\n      });\n    };\n  }\n\n  getGeolocation() {\n    this.setState({\n      loadingGeolocation: true,\n      errorMessage: null\n    }); //check if browser supports geolocaiton\n\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(this.onGeolocationSuccess, this.onGeolocationFailure, GEOLOCATION_OPTIONS);\n    } else {\n      this.setState({\n        loadingGeolocation: false,\n        errorMessage: 'Your browser does not support geolocation.'\n      });\n    }\n  }\n\n  getImagePosts() {\n    if (this.state.errorMessage) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, this.state.errorMessage);\n    } else if (this.state.loadingGeolocation) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        tip: \"Loading geolocation...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      });\n    } else if (this.state.loadingPosts) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        tip: \"Loading posts...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      });\n    } else if (this.state.posts.length > 0) {\n      const images = this.state.posts.map(post => {\n        return {\n          src: post.url,\n          thumbnail: post.url,\n          thumbnailWidth: 400,\n          thumbnailHeight: 300,\n          caption: post.message,\n          user: post.user\n        };\n      });\n      return /*#__PURE__*/React.createElement(Gallery, {\n        images: images,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      });\n    } else {\n      return 'No nearby posts.';\n    }\n  }\n\n  componentDidMount() {\n    this.getGeolocation();\n  }\n\n  render() {\n    const operations = /*#__PURE__*/React.createElement(CreatePostButton, {\n      onSuccess: this.loadNearbyPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 28\n      }\n    });\n    return /*#__PURE__*/React.createElement(Tabs, {\n      tabBarExtraContent: operations,\n      className: \"main-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Image Posts\",\n      key: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, this.getImagePosts()), /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Video Posts\",\n      key: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }, \"Video Posts\"), /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Map\",\n      key: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, \"Map\"));\n  }\n\n}\n;","map":{"version":3,"sources":["C:/Users/xiaoq/Developer/around-web/src/components/Home.js"],"names":["React","Tabs","Button","Spin","Gallery","CreatePostButton","GEOLOCATION_OPTIONS","POSITION_KEY","TOKEN_KEY","AUTH_HEADER","API_ROOT","TabPane","Home","Component","state","loadingGeolocation","loadingPosts","errorMessage","posts","onGeolocationSuccess","position","setState","console","log","latitude","longitude","coords","localStorage","setItem","JSON","stringify","loadNearbyPost","onGeolocationFailure","parse","getItem","range","token","fetch","method","headers","Authorization","then","response","ok","json","Error","data","catch","error","message","getGeolocation","navigator","geolocation","getCurrentPosition","getImagePosts","length","images","map","post","src","url","thumbnail","thumbnailWidth","thumbnailHeight","caption","user","componentDidMount","render","operations"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Tabs, Button, Spin } from 'antd';\r\nimport { Gallery } from './Gallery';\r\nimport { CreatePostButton } from \"./CreatePostButton\";\r\nimport {\r\n    GEOLOCATION_OPTIONS,\r\n    POSITION_KEY,\r\n    TOKEN_KEY,\r\n    AUTH_HEADER,\r\n    API_ROOT,\r\n} from \"../constants\";\r\nimport '../styles/Home.css';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport class Home extends React.Component {\r\n    state = {\r\n        loadingGeolocation: false,\r\n        loadingPosts: false,\r\n        errorMessage: null,\r\n        posts: [],\r\n    };\r\n\r\n    getGeolocation() {\r\n        this.setState({\r\n            loadingGeolocation: true,\r\n            errorMessage: null,\r\n        });\r\n\r\n        //check if browser supports geolocaiton\r\n        if ('geolocation' in navigator) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                this.onGeolocationSuccess,\r\n                this.onGeolocationFailure,\r\n                GEOLOCATION_OPTIONS,\r\n            );\r\n        } else {\r\n            this.setState({\r\n                loadingGeolocation: false,\r\n                errorMessage: 'Your browser does not support geolocation.',\r\n            });\r\n        }\r\n    }\r\n\r\n    onGeolocationSuccess = (position) => {\r\n        this.setState({\r\n            loadingGeolocation: false,\r\n            errorMessage: null,\r\n        });\r\n        console.log(position);\r\n\r\n        //destructuring\r\n        const { latitude, longitude } = position.coords;\r\n        //{ latitude: latitude, longitude: longitude }\r\n        localStorage.setItem(POSITION_KEY, JSON.stringify({ latitude, longitude }));\r\n        this.loadNearbyPost();\r\n    }\r\n\r\n    onGeolocationFailure = () => {\r\n        this.setState({\r\n            loadingGeolocation: false,\r\n            errorMessage: 'Failed to load geolocation.',\r\n        });\r\n    }\r\n\r\n    loadNearbyPost = () => {\r\n        this.setState({\r\n            loadingPosts: true,\r\n            errorMessage: null,\r\n        });\r\n\r\n        const position = JSON.parse(localStorage.getItem(POSITION_KEY));\r\n        const range = 20;\r\n        const token = localStorage.getItem(TOKEN_KEY);\r\n\r\n        fetch(`${API_ROOT}/search?lat=${position.latitude}&lon=${position.longitude}&range=${range}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: `${AUTH_HEADER} ${token}`,\r\n            }\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            throw new Error('Fail to load posts');\r\n        }).then((data) => {\r\n            console.log(data);\r\n            this.setState({\r\n                loadingPosts: false,\r\n                posts: data ? data : [],\r\n            });\r\n        }).catch((error) => {\r\n            this.setState({\r\n                loadingPosts: false,\r\n                errorMessage: error.message,\r\n            });\r\n        })\r\n    }\r\n\r\n    getImagePosts() {\r\n        if (this.state.errorMessage) {\r\n            return (\r\n                <div>\r\n                    {this.state.errorMessage}\r\n                </div>\r\n            );\r\n        } else if (this.state.loadingGeolocation) {\r\n            return (\r\n                <Spin tip=\"Loading geolocation...\" />\r\n            );\r\n        } else if (this.state.loadingPosts) {\r\n            return (\r\n                <Spin tip=\"Loading posts...\" />\r\n            );\r\n        } else if (this.state.posts.length > 0) {\r\n            const images = this.state.posts.map((post) => {\r\n                return {\r\n                    src: post.url,\r\n                    thumbnail: post.url,\r\n                    thumbnailWidth: 400,\r\n                    thumbnailHeight: 300,\r\n                    caption: post.message,\r\n                    user: post.user,\r\n                };\r\n            });\r\n\r\n            return (\r\n                <Gallery images={images}/>\r\n            );\r\n        }\r\n        else {\r\n            return 'No nearby posts.';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getGeolocation();\r\n    }\r\n\r\n    render() {\r\n        const operations = <CreatePostButton onSuccess={this.loadNearbyPost} />;\r\n\r\n        return (\r\n            <Tabs tabBarExtraContent={operations} className=\"main-tabs\">\r\n                <TabPane tab=\"Image Posts\" key=\"1\">\r\n                    {this.getImagePosts()}\r\n                </TabPane>\r\n                <TabPane tab=\"Video Posts\" key=\"2\">\r\n                    Video Posts\r\n                </TabPane>\r\n                <TabPane tab=\"Map\" key=\"3\">\r\n                    Map\r\n                </TabPane>\r\n            </Tabs>\r\n        );\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}