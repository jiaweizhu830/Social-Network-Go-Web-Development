{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xiaoq\\\\Developer\\\\around-web\\\\src\\\\components\\\\CreatePostButton.js\";\nimport React from 'react';\nimport { Modal, Button, message } from 'antd';\nimport { CreatePostForm } from \"./CreatePostForm\";\nimport { API_ROOT, AUTH_HEADER, POSITION_KEY, POSITION_NOISE } from \"../constants\";\nexport class CreatePostButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false,\n      confirmLoading: false\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleOk = () => {\n      this.setState({\n        confirmLoading: true\n      });\n      this.form.scrollToField((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values); //上传FormData, 因为不允许直接上传文件\n\n          const formData = new FormData();\n          const token = localStorage.getItem(POSITION_KEY);\n          const position = JSON.parse(localStorage.getItem(POSITION_KEY)); //add noise to position\n\n          formData.append('lat', position.latitude + Math.random() * POSITION_NOISE * 2 - POSITION_NOISE);\n          formData.append('lon', position.longitude + Math.random() * POSITION_NOISE * 2 - POSITION_NOISE);\n          formData.append('message', values.message); //只上传第一张图片 if 多图片上传\n\n          formData.append('image', values.image[0].originFileObj);\n          fetch(`${API_ROOT}/post`, {\n            method: 'POST',\n            body: formData,\n            headers: {\n              Authorization: `${AUTH_HEADER} ${token}`\n            },\n            dataType: 'text'\n          }).then(response => {\n            if (response.ok) {\n              message.success('Create post succeeded!');\n              this.form.resetFields();\n              this.setState({\n                visible: false,\n                confirmLoading: false\n              });\n\n              if (this.props.onSuccess) {\n                this.props.onSuccess();\n              }\n            } else {\n              message.error('Create  post failed.');\n              this.setState({\n                confirmLoading: false\n              });\n            }\n          });\n        } else {\n          this.setState({\n            confirmLoading: false\n          });\n        }\n      });\n    };\n\n    this.handleCancel = () => {\n      console.log('Clicked cancel button');\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.saveFormRef = formInstance => {\n      this.form = formInstance;\n    };\n  }\n\n  render() {\n    const {\n      visible,\n      confirmLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.showModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"Create New Post\"), /*#__PURE__*/React.createElement(Modal, {\n      title: \"Create New Post\",\n      okText: \"Create\",\n      visible: visible,\n      onOk: this.handleOk,\n      confirmLoading: confirmLoading,\n      onCancel: this.handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CreatePostForm, {\n      ref: this.saveFormRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/xiaoq/Developer/around-web/src/components/CreatePostButton.js"],"names":["React","Modal","Button","message","CreatePostForm","API_ROOT","AUTH_HEADER","POSITION_KEY","POSITION_NOISE","CreatePostButton","Component","state","visible","confirmLoading","showModal","setState","handleOk","form","scrollToField","err","values","console","log","formData","FormData","token","localStorage","getItem","position","JSON","parse","append","latitude","Math","random","longitude","image","originFileObj","fetch","method","body","headers","Authorization","dataType","then","response","ok","success","resetFields","props","onSuccess","error","handleCancel","saveFormRef","formInstance","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Modal, Button, message } from 'antd';\r\nimport { CreatePostForm } from \"./CreatePostForm\";\r\nimport { API_ROOT, AUTH_HEADER, POSITION_KEY, POSITION_NOISE } from \"../constants\"\r\n\r\nexport class CreatePostButton extends React.Component {\r\n    state = {\r\n        visible: false,\r\n        confirmLoading: false,\r\n    };\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            visible: true,\r\n        });\r\n    };\r\n\r\n    handleOk = () => {\r\n        this.setState({\r\n            confirmLoading: true,\r\n        });\r\n\r\n        this.form.scrollToField((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                //上传FormData, 因为不允许直接上传文件\r\n                const formData = new FormData();\r\n                const token = localStorage.getItem(POSITION_KEY);\r\n                const position = JSON.parse(localStorage.getItem(POSITION_KEY));\r\n\r\n                //add noise to position\r\n                formData.append('lat', position.latitude + Math.random() * POSITION_NOISE * 2 - POSITION_NOISE);\r\n                formData.append('lon', position.longitude + Math.random() * POSITION_NOISE * 2 - POSITION_NOISE);\r\n                formData.append('message', values.message);\r\n                //只上传第一张图片 if 多图片上传\r\n                formData.append('image', values.image[0].originFileObj);\r\n\r\n                fetch(`${API_ROOT}/post`, {\r\n                    method: 'POST',\r\n                    body: formData,\r\n                    headers: {\r\n                        Authorization: `${AUTH_HEADER} ${token}`,\r\n                    },\r\n                    dataType: 'text',\r\n                }).then((response) => {\r\n                    if (response.ok) {\r\n                        message.success('Create post succeeded!');\r\n                        this.form.resetFields();\r\n                        this.setState({\r\n                            visible: false,\r\n                            confirmLoading: false,\r\n                        });\r\n\r\n                        if (this.props.onSuccess) {\r\n                            this.props.onSuccess();\r\n                        }\r\n                    } else {\r\n                        message.error('Create  post failed.');\r\n                        this.setState({\r\n                            confirmLoading: false,\r\n                        });\r\n                    }\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    confirmLoading: false,\r\n                });\r\n            }\r\n        })\r\n    };\r\n\r\n    handleCancel = () => {\r\n        console.log('Clicked cancel button');\r\n        this.setState({\r\n            visible: false,\r\n        });\r\n    };\r\n\r\n    saveFormRef = (formInstance) => {\r\n        this.form = formInstance;\r\n    }\r\n\r\n    render() {\r\n        const { visible, confirmLoading } = this.state;\r\n        return (\r\n            <div>\r\n                <Button type=\"primary\" onClick={this.showModal}>\r\n                    Create New Post\r\n                </Button>\r\n                <Modal\r\n                    title=\"Create New Post\"\r\n                    okText=\"Create\"\r\n                    visible={visible}\r\n                    onOk={this.handleOk}\r\n                    confirmLoading={confirmLoading}\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    <CreatePostForm ref={this.saveFormRef} />\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}