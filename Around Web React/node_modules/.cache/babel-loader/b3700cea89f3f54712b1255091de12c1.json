{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xiaoq\\\\Developer\\\\around-web\\\\src\\\\components\\\\Register.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { API_ROOT } from \"../constants\";\nimport '../styles/Register.css';\nimport { Form, Input, Button, message } from 'antd';\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      // e.preventDefault();\n      let lastResponse;\n      this.props.form.scrollToField((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          fetch(`${API_ROOT}/signup`, {\n            method: 'POST',\n            body: JSON.stringify({\n              username: values.username,\n              password: values.password\n            })\n          }).then(response => {\n            lastResponse = response;\n            return response.text();\n          }, error => {\n            console.log('Error');\n          }).then(text => {\n            if (lastResponse.ok) {\n              message.success(text);\n              this.props.history.push('/login');\n            } else {\n              message.error(text);\n            }\n          });\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    // const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n      onFinish: this.handleSubmit,\n      className: \"register-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Username\",\n      name: \"username\",\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      name: \"password\",\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      } // {\n      //     validator: this.validateToNextPassword,\n      // },\n      ],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input.Password, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      name: \"confirm\",\n      dependencies: ['password'],\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          if (!value || getFieldValue('password') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('The two passwords that you entered do not match!');\n        }\n\n      }) // {\n      //     validator: this.compareToFirstPassword,\n      // },\n      ],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }, \"I already have an account, go back to \", /*#__PURE__*/React.createElement(Link, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 63\n      }\n    }, \"login\"))));\n  } //     return (\n  //         <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register-form\">\n  //             <Form.Item label=\"Username\">\n  //                 {getFieldDecorator('username', {\n  //                     rules: [\n  //                         {\n  //                             required: true,\n  //                             message: 'Please input your username!',\n  //                         },\n  //                     ],\n  //                 })(<Input />)}\n  //             </Form.Item>\n  //\n  //             <Form.Item label=\"Password\" hasFeedback>\n  //                 {getFieldDecorator('password', {\n  //                     rules: [\n  //                         {\n  //                             required: true,\n  //                             message: 'Please input your password!',\n  //                         },\n  //                         {\n  //                             validator: this.validateToNextPassword,\n  //                         }\n  //                     ],\n  //                 })(<Input.Password />)}\n  //             </Form.Item>\n  //\n  //             <Form.Item label=\"Confirm Password\" hasFeedback>\n  //                 {getFieldDecorator('confirm', {\n  //                     rules: [\n  //                         {\n  //                             required: true,\n  //                             message: 'Please confirm your password!',\n  //                         },\n  //                         {\n  //                             validator: this.compareToFirstPassword,\n  //                         }\n  //                     ],\n  //                 })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n  //             </Form.Item>\n  //\n  //             <Form.Item {...tailFormItemLayout}>\n  //                 <Button type=\"primary\" htmlType=\"submit\">\n  //                     Register\n  //                 </Button>\n  //                 <div>\n  //                     I already have an account, go back to <Link to=\"/login\">login</Link>\n  //                 </div>\n  //             </Form.Item>\n  //         </Form>\n  //     );\n  // }\n\n\n}\n\n;\nexport const Register = RegistrationForm; // export const Register = Form.create({ name: 'register' })(RegistrationForm);","map":{"version":3,"sources":["C:/Users/xiaoq/Developer/around-web/src/components/Register.js"],"names":["React","Link","API_ROOT","Form","Input","Button","message","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","lastResponse","props","form","scrollToField","err","values","console","log","fetch","method","body","JSON","stringify","username","password","then","response","text","error","ok","success","history","push","handleConfirmBlur","value","target","setState","handleWebsiteChange","map","domain","render","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","required","getFieldValue","validator","rule","Promise","resolve","reject","Register"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { API_ROOT } from \"../constants\";\r\nimport '../styles/Register.css';\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    message,\r\n} from 'antd';\r\n\r\nclass RegistrationForm extends React.Component {\r\n    state = {\r\n        confirmDirty: false,\r\n        autoCompleteResult: [],\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        // e.preventDefault();\r\n        let lastResponse;\r\n\r\n        this.props.form.scrollToField((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                fetch(`${API_ROOT}/signup`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        username: values.username,\r\n                        password: values.password,\r\n                    }),\r\n                }).then((response) => {\r\n                    lastResponse = response;\r\n                    return response.text();\r\n                }, (error) => {\r\n                    console.log('Error');\r\n                }).then((text) => {\r\n                    if (lastResponse.ok) {\r\n                        message.success(text);\r\n                        this.props.history.push('/login');\r\n                    } else {\r\n                        message.error(text);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    // handleSubmit = e => {\r\n    //     e.preventDefault();\r\n    //     let lastResponse;\r\n    //\r\n    //     this.props.form.scrollToField((err, values) => {\r\n    //         if (!err) {\r\n    //             console.log('Received values of form: ', values);\r\n    //             fetch(`${API_ROOT}/signup`, {\r\n    //                 method: 'POST',\r\n    //                 body: JSON.stringify({\r\n    //                    username: values.username,\r\n    //                    password: values.password,\r\n    //                 }),\r\n    //             }).then((response) => {\r\n    //                 lastResponse = response;\r\n    //                 return response.text();\r\n    //             }, (error) => {\r\n    //                 console.log('Error');\r\n    //             }).then((text) => {\r\n    //                 if (lastResponse.ok) {\r\n    //                     message.success(text);\r\n    //                     this.props.history.push('/login');\r\n    //                 } else {\r\n    //                     message.error(text);\r\n    //                 }\r\n    //             });\r\n    //         }\r\n    //     });\r\n    // };\r\n\r\n    handleConfirmBlur = e => {\r\n        const { value } = e.target;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n\r\n    // compareToFirstPassword = (rule, value, callback) => {\r\n    //     const { form } = this.props;\r\n    //     if (value && value !== form.getFieldValue('password')) {\r\n    //         callback('Two passwords that you enter is inconsistent!');\r\n    //     } else {\r\n    //         callback();\r\n    //     }\r\n    // };\r\n\r\n    // validateToNextPassword = (rule, value, callback) => {\r\n    //     const { form } = this.props;\r\n    //     if (value && this.state.confirmDirty) {\r\n    //         form.validateFields(['confirm'], { force: true });\r\n    //     }\r\n    //     callback();\r\n    // };\r\n\r\n    handleWebsiteChange = value => {\r\n        let autoCompleteResult;\r\n        if (!value) {\r\n            autoCompleteResult = [];\r\n        } else {\r\n            autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n        }\r\n        this.setState({ autoCompleteResult });\r\n    }\r\n\r\n    render () {\r\n        // const { getFieldDecorator } = this.props.form;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 },\r\n            },\r\n        };\r\n\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8,\r\n                },\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Form {...formItemLayout} onFinish={this.handleSubmit} className=\"register-form\">\r\n                <Form.Item label=\"Username\" name=\"username\"\r\n                   rules={[\r\n                       {\r\n                           required: true,\r\n                           message: 'Please input your username!',\r\n                       },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Password\" hasFeedback name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                        // {\r\n                        //     validator: this.validateToNextPassword,\r\n                        // },\r\n                ]}>\r\n                    <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Confirm Password\" hasFeedback name=\"confirm\" dependencies={['password']}\r\n                   rules={[\r\n                       {\r\n                           required: true,\r\n                           message: 'Please confirm your password!',\r\n                       },\r\n                       ({ getFieldValue }) => ({\r\n                           validator(rule, value) {\r\n                               if (!value || getFieldValue('password') === value) {\r\n                                   return Promise.resolve();\r\n                               }\r\n\r\n                               return Promise.reject('The two passwords that you entered do not match!');\r\n                           },\r\n                       }),\r\n                       // {\r\n                       //     validator: this.compareToFirstPassword,\r\n                       // },\r\n               ]}>\r\n                    <Input.Password onBlur={this.handleConfirmBlur} />\r\n                    {/*<Input.Password />*/}\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Register\r\n                    </Button>\r\n                    <div>\r\n                        I already have an account, go back to <Link to=\"/login\">login</Link>\r\n                    </div>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    //     return (\r\n    //         <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register-form\">\r\n    //             <Form.Item label=\"Username\">\r\n    //                 {getFieldDecorator('username', {\r\n    //                     rules: [\r\n    //                         {\r\n    //                             required: true,\r\n    //                             message: 'Please input your username!',\r\n    //                         },\r\n    //                     ],\r\n    //                 })(<Input />)}\r\n    //             </Form.Item>\r\n    //\r\n    //             <Form.Item label=\"Password\" hasFeedback>\r\n    //                 {getFieldDecorator('password', {\r\n    //                     rules: [\r\n    //                         {\r\n    //                             required: true,\r\n    //                             message: 'Please input your password!',\r\n    //                         },\r\n    //                         {\r\n    //                             validator: this.validateToNextPassword,\r\n    //                         }\r\n    //                     ],\r\n    //                 })(<Input.Password />)}\r\n    //             </Form.Item>\r\n    //\r\n    //             <Form.Item label=\"Confirm Password\" hasFeedback>\r\n    //                 {getFieldDecorator('confirm', {\r\n    //                     rules: [\r\n    //                         {\r\n    //                             required: true,\r\n    //                             message: 'Please confirm your password!',\r\n    //                         },\r\n    //                         {\r\n    //                             validator: this.compareToFirstPassword,\r\n    //                         }\r\n    //                     ],\r\n    //                 })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n    //             </Form.Item>\r\n    //\r\n    //             <Form.Item {...tailFormItemLayout}>\r\n    //                 <Button type=\"primary\" htmlType=\"submit\">\r\n    //                     Register\r\n    //                 </Button>\r\n    //                 <div>\r\n    //                     I already have an account, go back to <Link to=\"/login\">login</Link>\r\n    //                 </div>\r\n    //             </Form.Item>\r\n    //         </Form>\r\n    //     );\r\n    // }\r\n};\r\n\r\nexport const Register = RegistrationForm;\r\n// export const Register = Form.create({ name: 'register' })(RegistrationForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}